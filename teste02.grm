!types-----------------------------
<Type> ::= <TypeName> | <TypeLit> | '(' <Type> ')'
<TypeName> ::= <identifier> | <QualifiedIdent>         
<TypeLit> ::= <ArrayType> 
           | <StructType> 
           | <PointerType> 
           | <FunctionType> 
           | <InterfaceType> 
           | <SliceType> 
           | <MapType> 
           | <ChannelType>

!Array type---------------------------------------------
<ArrayType> ::= '[' <ArrayLength> ']' <ElementType>             
<ArrayLength> ::= <Expression>                
<ElementType> ::= <Type>
               
!Struct type------------------------------------------------
<StructType> ::= 'struct' '{' '}' | 'struct' '{' <StructType> <FieldDecl>';'  '}'           
<FieldDecl>  ::= <IdentifierList> <Type> | <EmbeddedField> <Tag> | <EmbeddedField> 
<EmbeddedField> ::= '*' <TypeName> | <TypeName> 
<Tag> ::= <string_lit>
       
!Pointer---------------------------------------------------------
<PointerType> ::= '*' <BaseType>             
<BaseType>    ::= <Type> 
                           
!Function type-------------------------------------------------
<FunctionType>   ::= 'func' <Signature>                  
<Signature>      ::= <Parameters> <Result> | <Parameters>
<Result>         ::= <Parameters> | <Type> 
<Parameters>     ::= '(' <ParameterList> ',' ')'|'('<ParameterList>')' |'(' ')'
<ParameterList>  ::= <ParameterDecl>  | <ParameterList> <ParameterDecl>  ',' <ParameterDecl>
<ParameterDecl>  ::= <Type> | <IdentifierList> '...'  <Type> | '...' <Type> | <IdentifierList> <Type> 
               
               
!QualifiedIdent-----------------------------------------
<QualifiedIdent> ::= <PackageName> '.' <identifier> 

!type definitions------------------------------------------
<TypeDef> ::= <identifier> <Type>


!Interface-Types--------------------------------------------------
<InterfaceType> ::= 'interface' '{''}'| <InterfaceType> 'interface' '{' <MethodSpec> ';' '}' 
<MethodSpec> ::= <MethodName> <Signature> | <InterfaceTypeName> 
<MethodName> ::= <identifier>
<InterfaceTypeName> ::= <TypeName> 
                     
!SLice types-------------------------------------------------
<SliceType> ::= '[' ']' <ElementType>


!Map types--------------------------------------------------
<MapType> ::= 'map' '[' <KeyType> ']' <ElementType> 
<KeyType> ::= <Type>
           

!channel Type-----------------------------------------------
<ChannelType> ::= 'chan' | 'chan' '<-' | '<-' 'chan' <ElementType>
               
!Blocks-----------------------------------------------------
<Block> ::= '{' <StatementList> '}'
<StatementList> ::= | <StatementList> <Statement>';' !ver se a barra dá errro--------------------------------------


!declarations anda Scope------------------------------------------------
<Declaration>   ::= <ConstDecl> | <TypeDecl> | <VarDecl> 
<TopLevelDecl>  ::= <Declaration> | <FunctionDecl> | <MethodDecl>
                 
!Constant declarations-----------------------------------------------------
<ConstDecl>      ::= 'const' ConstSpec | '('')' |'('  <ConstDecl> <ConstSpec>';'  ')' 
<ConstSpec>      ::= <IdentifierList> 
                  | <IdentifierList> <Type> '=' <ExpressionList> 
                  | <IdentifierList> '=' <ExpressionList>
<IdentifierList> ::= <identifier> | <IdentifierList> <identifier> ',' <identifier> 
<ExpressionList> ::= <Expression> | <ExpressionList> <Expression> ',' <Expression> 

!Type declarations------------------------------------------------------
<TypeDecl> ::= 'type'  <TypeSpec> 
            | '('')'
            | <TypeDecl>'(' <TypeSpec> ';' ')'
<TypeSpec> ::= <AliasDecl> | <TypeDef> 
            
!Alias declaration-------------------------------------------
<AliasDecl> ::= <identifier> '=' <Type> 
             
!Variable declaration--------------------------------------------
<VarDecl> ::= 'var' <VarSpec> |'('')'|<VarDecl> '(' <VarSpec> ';' ')'
<VarSpec> ::= <IdentifierList> <Type> 
           | <IdentifierList> <Type>  '=' <ExpressionList> 
           | '=' <ExpressionList> 
            
!Short variable declation--------------------------------------------
<ShortVarDecl> ::= <IdentifierList> ':=' <ExpressionList> 

!Function declaration-----------------------------------------------
<FunctionDecl> ::= 'func' <FunctionName> <Signature> <FunctionBody>
                |'func' <FunctionName> <Signature>
<FunctionName> ::= <identifier>
<FunctionBody> ::= <Block> 
                
!Method declaration ------------------------------------------------------
<MethodDecl> ::= 'func' <Receiver> <MethodName> <Signature> <FunctionBody>
              |'func' <Receiver> <MethodName> <Signature>
<Receiver> ::= <Parameters> 
            
!Expressions--------------------------------------------------------------
!Operands-----------------------------------------------------------------
<Operand> ::= <Literal> | <OperandName> | '(' <Expression> ')' 
<Literal> ::= <BasicLit> | <CompositeLit> | <FunctionLit> 
<BasicLit> ::= <int_lit> | <float_lit> | <imaginary_lit> 
            | <rune_lit> | <string_lit>
<OperandName>::= <identifier> | <QualifiedIdent>
              

                  
!Composite literals--------------------------------------------------------
<CompositeLit>  ::= <LiteralType> <LiteralValue> 
<LiteralType>   ::= <StructType> | <ArrayType> | '[' '...' ']' <ElementType> 
                 | <SliceType> |<MapType> | <TypeName>
<LiteralValue> ::= '{' '}' |'{' <ElementList>  '}'|'{' <ElementList> ',' '}' 
<ElementList> ::= <KeyedElement> | <ElementList> <KeyedElement> ',' <KeyedElement>
<KeyedElement> ::= <Element> | <KeyedElement> <Key> ':' <Element>
<Key> ::= <FieldName> | <Expression> | <LiteralValue> 
<FieldName> ::= <identifier>
<Element> ::= <Expression> | <LiteralValue> 
           
!Functon literals----------------------------------------------------------
<FunctionLit> ::= 'func' <Signature> <FunctionBody>
               
!Primary Expressions---------------------------------------------------------
<PrimaryExpr> ::= <Operand> | <Conversion> | <MethodExpr> 
               | <PrimaryExpr> <Selector> |<PrimaryExpr> <Index> |<PrimaryExpr> <Slice> 
               |<PrimaryExpr> <TypeAssertion> |<PrimaryExpr> <Arguments>

<Selector> ::= '.' <identifier>
<Index> ::= '[' <Expression> ']'
!<Slice> ::= '[' ']' |'[' [ Expression ] ':' [ Expression ] ']' |'[' [ Expression ] ':' <Expression> ':' <Expression> ']'
<TypeAssertion> ::= '.' '(' <Type> ')'

!<Arguments> ::= '(' <ExpressionList> | <Type>  ',' <ExpressionList> '...' ',' ')' 
!             | '(' ')'
!             |'('  <ExpressionList> ')'
!             |'('  <ExpressionList> | <Type> [ "," ExpressionList ] ) [ "..." ] [ "," ] ]')'
!             |'(' [  ExpressionList | Type [ ',' ExpressionList ]   [ ',' ] ] ')'
!             |'(' [  ExpressionList | Type [ ',' ExpressionList ]  [ '...' ]  ] ')'












