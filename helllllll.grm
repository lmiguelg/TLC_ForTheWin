"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------
{WS} = {Whitespace} - {CR} - {LF}

{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["]

! -------------------------------------------------
! Terminals
! -------------------------------------------------
Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}      
Identifier    = {ID Head}{ID Tail}*
StringLiteral = '"' {String Chars}* '"'
              
Numeros = {Digit}+ |  {Digit}+ '.' {Digit}+ | {Digit}+ '.' | '.' {Digit}+
        


! -------------------------------------------------
! Rules
! -------------------------------------------------

!<Commentary> ::= '//'
           
!<Comentary_all> ::= '*/' | '/*' 

<nl>     ::= NewLine <nl>          !One or more
          |  NewLine

<nl Opt> ::= NewLine <nl Opt>      !Zero or more
          |  !Empty

! <nl opt> removes blank lines before first statement
! The grammar starts below
<Program> ::= <nl opt> <Value> 

<Expression>  ::= <Expression> '>'  <Add Exp> 
               |  <Expression> '<'  <Add Exp> 
               |  <Expression> '<=' <Add Exp> 
               |  <Expression> '>=' <Add Exp>
               |  <Expression> '==' <Add Exp>    !Equal
               |  <Add Exp> 

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
               |  <Add Exp> '-' <Mult Exp>
               |  <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Other Exp>  
               |  <Mult Exp> '/' <Other Exp> 
               |  <Other Exp>  

<Other Exp>  ::= <Other Exp>'||'<Value>
               | <Other Exp>'&&'<Value>
               | <Other Exp>'|'<Value>
               | <Other Exp>'^'<Value>
               | '!'<Value>
               | <Other Exp>'&'<Value>
               | <Other Exp>'&^'<Value>
               | <Other Exp>'<-'<Value>
               | <Other Exp>':='<Value>         
               | <Value> 

!Add more values to the rule below - as needed

<Value>       ::= Identifier
               |  '(' <Expression> ')'<nl>
               | Identifier '=' <Value>
               | <PackageClause> <ImportDecl> <Value>
               | <ImportDecl> <Value>
               | <Type>
               | Numeros 
               | <Type> <Value>
               |<a>

 
  
           
            
               
               
               
<Type> ::= <FunctionDecl><nl>
        
<FunctionDecl> ::= 'func'Identifier <Parameters> <Block> 
                
<Parameters> ::= '('')'|'('<ParametersList>')'
       
<ParametersList> ::= <ParametersList> ',' Identifier 
                  |Identifier               
!Package----------------------------------------------------------
<PackageClause> ::= 'package' Identifier<nl>             
 
!Import declarations------------------------------------------------
<ImportDecl> ::= 'import' StringLiteral<nl>
!não é preciso String lit pq já existe 
              
<etapas> ::= Identifier '.' Identifier '(' <prints> ')'
       
 
<prints> ::= StringLiteral ',' <Expression> 
          | <Expression>
          | StringLiteral


!Blocks-----------------------------------------------------
<Block> ::= '{'<nl> <StatementList> '}'|'{' '}'
         
<StatementList> ::=  <StatementList> <Statement> 
              | <Statement> 
                
<Statement> ::= <etapas><nl>
             |<ForStm><nl>
             | <IfStatment><nl>
             |<SwitchStm><nl>
             |<FunctionDecl> <nl>
             
!IF Statment----------------------------------------------
<IfStatment> ::= IF <Expression> <Block> 
              |IF <Expression> <Block> <nl> ELSE <Block> 
              |IF <Expression> <Block> ELSE <Block> 
              |IF <Expression> <Block> <nl> ELSE IF <Expression> <Block>
              |IF <Expression> <Block> ELSE IF <Expression> <Block>
              

!For Statment----------------------------------------------           
<ForStm> ::= FOR <Expression> <Block>
          |FOR <Block>
          |FOR <Expression> ';' <Expression> ';' <IncDecStmt> <Block>
          
!Switch Statment---------------------------------------------
<SwitchStm> ::= 'switch' Identifier '{'<nl> <caseList> '}'
             |'switch''{'<nl> <caseList> '}'
             |'switch' <Expression>'{'<nl> <caseList> '}'
             
<Case> ::= 'case' <Vars> ':' <nl> <etapas> <nl>
        |'default' ':'<nl> <etapas> <nl> 
        !|'case'  <Expression> <nl> <etapas> <nl>
        !falta fazer o caso case t.Hour() < 12:
        
<caseList> ::=<caseList> <case>
            |<case>

<a> ::= Identifier <Selector> 
!decrementação incrementação
<IncDecStmt> ::= <Vars> '++' | <Vars> '--'
<Vars> ::= Identifier | Numeros            

!Selector----------------------------------------------------
<Selector> ::= '.' Identifier
            |'.' Identifier '(' ')'
            |'.' Identifier '('<Parameters> ')'
            |'.' '('Identifier')'












